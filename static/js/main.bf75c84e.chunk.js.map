{"version":3,"sources":["components/Recipe.js","Skeletons/SkeletonElement.js","Skeletons/SkeletonRecipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","src","alt","SkeletonElement","type","classes","SkeletonRecipe","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","progress","useRef","useEffect","getrecipes","current","continuousStart","a","fetch","response","json","data","hits","complete","console","log","color","ref","height","onSubmit","e","preventDefault","value","placeholder","onChange","target","icon","faSearch","size","onClick","innerHTML","map","recipe","label","n","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf75c84e.chunk.js","sourcesContent":["import React from \"react\";\n// import style from \"../recipe.module.css\";\n\nconst Recipe = ({ title, calories, image, ingredients }) => {\n  return (\n    <div className=\"recipe\">\n      <img className=\"images\" src={image} alt=\"\" />\n      <h2 className=\"title\">{title}</h2>\n      <p> Calories - {calories}</p>\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React from 'react';\nimport './Skeleton.css';\n\nconst SkeletonElement = ({type}) => {\n    const classes = `skeleton ${type}`\n    return(\n        <div className={classes}></div>\n    )\n}\n\nexport default SkeletonElement;","import React from 'react';\nimport SkeletonElement from './SkeletonElement';\nimport './Skeleton.css';\n\nconst SkeletonRecipe = () => {\n    // const classes = `skeleton ${type}`\n    return(\n        <div className=\"skeleton-card\">\n            <SkeletonElement type=\"image\" />\n            <SkeletonElement type=\"title\" />\n            <SkeletonElement type=\"para\" />\n\n        </div>\n    )\n}\n\nexport default SkeletonRecipe;","import React, { useEffect, useRef, useState } from \"react\";\nimport Recipe from \"./components/Recipe\";\nimport SkeletonRecipe from \"./Skeletons/SkeletonRecipe\";\nimport \"./App.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport LoadingBar from \"react-top-loading-bar\";\n\nconst App = () => {\n  const APP_ID = \"12b28fb1\";\n  const API_KEY = \"172fe97b5c8265bc43881237e14ef1fd\";\n\n  const [recipes, setRecipes] = useState(null);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n\n  // const [progress, setProgress] = useState(0);\n  const progress = useRef(null);\n\n  // let filledArray = Array.from({length:6},()=> ({recipe:{label:\"\", calories:\"\", image:\"\", ingredients:\"\"}}));\n  // setrecipes(filledArray);\n\n  useEffect(() => {\n    getrecipes();\n    progress.current.continuousStart();\n  }, [query]);\n\n  const getrecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${API_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n    progress.current.complete();\n    console.log(data.hits);\n  };\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setRecipes(null);\n    setQuery(search);\n  };\n\n  const popularHandler = (e) => {\n    console.log(e.target.innerHTML);\n    setSearch(e.target.innerHTML);\n    setRecipes(null);\n    setQuery(e.target.innerHTML);\n  };\n\n  return (\n    <div className=\"App\">\n      <LoadingBar color=\"#f11946\" ref={progress} height={3} />\n      <header>\n        <h1>Recipes</h1>\n        <form onSubmit={getSearch} className=\"search-form\">\n          <input\n            className=\"search-bar\"\n            type=\"text\"\n            value={search}\n            placeholder=\"Search for your favorite recipes\"\n            onChange={updateSearch}\n          />\n          <button className=\"search-btn\" type=\"submit\">\n            <FontAwesomeIcon icon={faSearch} size=\"lg\" />\n          </button>\n        </form>\n        {/* <div className=\"navigation\"> */}\n        <ul className=\"nav-list\">\n          <li>Home</li>\n          <li className=\"popular\">\n            Popular\n            <ul className=\"popular-dropdown\" onClick={popularHandler}>\n              <li>Chicken</li>\n              <li>Mutton</li>\n              <li>Biryani</li>\n              <li>Soup</li>\n            </ul>\n          </li>\n          <li>About</li>\n        </ul>\n        {/* </div> */}\n      </header>\n\n      <div className=\"recipes\">\n        {recipes &&\n          recipes.map((recipe) => (\n            <Recipe\n              key={recipe.recipe.label}\n              title={recipe.recipe.label}\n              calories={recipe.recipe.calories}\n              image={recipe.recipe.image}\n              ingredients={recipe.recipe.ingredients}\n            />\n          ))}\n\n        {!recipes &&\n          [1, 2, 3, 4, 5, 6, 7, 8, 9].map((n) => <SkeletonRecipe key={n} />)}\n\n        {[1,2,3,4].map((n) => (\n          <div className=\"fillerDivs\" key={n}></div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}